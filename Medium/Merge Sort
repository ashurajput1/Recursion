// Main function to perform merge sort on the array
func mergeSort(arr: inout [Int]) {
    helper(arr: &arr, start: 0, end: arr.count - 1)  // Call helper to sort the entire array
}

// Recursive helper function to divide the array and call merge
func helper(arr: inout [Int], start: Int, end: Int) {
    if start >= end {  // Base case: single element or invalid range
        return
    }
    
    let mid = (start + end) / 2  // Calculate the middle index

    helper(arr: &arr, start: start, end: mid)  // Recursively sort the left half
    helper(arr: &arr, start: mid + 1, end: end)  // Recursively sort the right half

    merge(arr: &arr, start: start, mid: mid, end: end)  // Merge the sorted halves
}

// Function to merge two sorted halves into a single sorted segment
func merge(arr: inout [Int], start: Int, mid: Int, end: Int) {
    var tempArr: [Int] = []  // Temporary array to store merged elements
    var i = start  // Pointer for the left half
    var j = mid + 1  // Pointer for the right half

    // Merge elements from both halves in sorted order
    while i <= mid && j <= end {
        if arr[i] < arr[j] {
            tempArr.append(arr[i])
            i += 1
        } else {
            tempArr.append(arr[j])
            j += 1
        }
    }

    // Append remaining elements from the left half, if any
    while i <= mid {
        tempArr.append(arr[i])
        i += 1
    }

    // Append remaining elements from the right half, if any
    while j <= end {
        tempArr.append(arr[j])
        j += 1
    }

    // Copy merged elements back into the original array
    for k in 0..<tempArr.count {
        arr[start + k] = tempArr[k]
    }
}

// Example usage
var unsortedArr: [Int] = [5, 4, 3, 2, 1]  // Unsorted array
mergeSort(arr: &unsortedArr)  // Sort the array using merge sort
print(unsortedArr)  // Print the sorted array
